# -*- coding: utf-8 -*-
"""rhythmoji.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kxjrAsf4uNaDb8xaVgy6Ss3KTPtG9cvA
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MultiLabelBinarizer

# Load the augmented dataset
file_path = '/refined_dataset.csv'  # Replace with the path to your augmented dataset
data = pd.read_csv(file_path)

# Encoding the categorical variables
mlb_genres = MultiLabelBinarizer()
mlb_attires = MultiLabelBinarizer()

# Preparing the genre and attire data for encoding
genres = data[['Genre_1', 'Genre_2', 'Genre_3']].values
attires = data[['Attire_1', 'Attire_2', 'Attire_3']].values

# Encoding the genres and attires
encoded_genres = mlb_genres.fit_transform(genres)
encoded_attires = mlb_attires.fit_transform(attires)

# Splitting the dataset
X_train, X_test, y_train, y_test = train_test_split(encoded_genres, encoded_attires, test_size=0.2, random_state=42)

# Define the neural network model
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(y_train.shape[1], activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=[tf.keras.metrics.BinaryAccuracy(), tf.keras.metrics.AUC()])

# Train the model
history = model.fit(X_train, y_train, epochs=30, batch_size=32, validation_split=0.1)

# Evaluate the model on the test set
test_loss, test_accuracy, test_auc = model.evaluate(X_test, y_test)
print(f"Test Loss: {test_loss}, Test Accuracy: {test_accuracy}, Test AUC: {test_auc}")

def predict_top_3_fashion_choices(genres, model, mlb_genres, mlb_attires):
    # Encode the input genres
    encoded_genres = mlb_genres.transform([genres])

    # Predict using the model
    predicted_attires_probabilities = model.predict(encoded_genres)[0]

    # Get the indices of the top 3 predictions
    top_3_indices = np.argsort(predicted_attires_probabilities)[-3:]

    # Get the corresponding attire labels
    top_3_attires = [mlb_attires.classes_[index] for index in top_3_indices]

    return top_3_attires

# Example usage
genres_input = ["Rock", "Metal", "Punk"]  # Replace with genres of your choice
top_3_predicted_attires = predict_top_3_fashion_choices(genres_input, model, mlb_genres, mlb_attires)
print("Top 3 Predicted Fashion Choices:", top_3_predicted_attires)